package c2j

import c2j.c.CLexer

class JavaVocabulary {
    private static final Map<Integer, String> cToJavaVocabulary = [
            (CLexer.Break)           : "break",
            (CLexer.Case)            : "case",
            (CLexer.Char)            : "char",
            (CLexer.Const)           : "public static final",
            (CLexer.Continue)        : "continue",
            (CLexer.Default)         : "default",
            (CLexer.Do)              : "do",
            (CLexer.Double)          : "double",
            (CLexer.Else)            : "else",
            (CLexer.Enum)            : "enum",
            (CLexer.Extern)          : "",
            (CLexer.Float)           : "float",
            (CLexer.For)             : "for",
            (CLexer.Goto)            : "",
            (CLexer.If)              : "if",
            (CLexer.Inline)          : "",
            (CLexer.Int)             : "int",
            (CLexer.Long)            : "long",
            (CLexer.Register)        : "",
            (CLexer.Restrict)        : "",
            (CLexer.Return)          : "return",
            (CLexer.Short)           : "short",
            (CLexer.Signed)          : "",
            (CLexer.Sizeof)          : "",
            (CLexer.Static)          : "",
            (CLexer.Struct)          : "public static class",
            (CLexer.Switch)          : "switch",
            (CLexer.Typedef)         : "",
            (CLexer.Union)           : "",
            (CLexer.Unsigned)        : "",
            (CLexer.Void)            : "void",
            (CLexer.Volatile)        : "",
            (CLexer.While)           : "while",
            (CLexer.Alignas)         : "",
            (CLexer.Alignof)         : "",
            (CLexer.Atomic)          : "",
            (CLexer.Bool)            : "boolean",
            (CLexer.Complex)         : "",
            (CLexer.Generic)         : "",
            (CLexer.Imaginary)       : "",
            (CLexer.Noreturn)        : "",
            (CLexer.StaticAssert)    : "assert",
            (CLexer.ThreadLocal)     : "",
            (CLexer.LeftParen)       : "(",
            (CLexer.RightParen)      : ")",
            (CLexer.LeftBracket)     : "[",
            (CLexer.RightBracket)    : "]",
            (CLexer.LeftBrace)       : "{",
            (CLexer.RightBrace)      : "}",
            (CLexer.Less)            : "<",
            (CLexer.LessEqual)       : "<=",
            (CLexer.Greater)         : ">",
            (CLexer.GreaterEqual)    : ">=",
            (CLexer.LeftShift)       : "",
            (CLexer.RightShift)      : "",
            (CLexer.Plus)            : "+",
            (CLexer.PlusPlus)        : "++",
            (CLexer.Minus)           : "-",
            (CLexer.MinusMinus)      : "--",
            (CLexer.Star)            : "*",
            (CLexer.Div)             : "/",
            (CLexer.Mod)             : "%",
            (CLexer.And)             : "&",
            (CLexer.Or)              : "|",
            (CLexer.AndAnd)          : "&&",
            (CLexer.OrOr)            : "||",
            (CLexer.Caret)           : "^",
            (CLexer.Not)             : "!",
            (CLexer.Tilde)           : "",
            (CLexer.Question)        : "",
            (CLexer.Colon)           : ":",
            (CLexer.Semi)            : ";",
            (CLexer.Comma)           : ",",
            (CLexer.Assign)          : "=",
            (CLexer.StarAssign)      : "*=",
            (CLexer.DivAssign)       : "/=",
            (CLexer.ModAssign)       : "%=",
            (CLexer.PlusAssign)      : "+=",
            (CLexer.MinusAssign)     : "-=",
            (CLexer.LeftShiftAssign) : "<=",
            (CLexer.RightShiftAssign): ">=",
            (CLexer.AndAssign)       : "&=",
            (CLexer.XorAssign)       : "^=",
            (CLexer.OrAssign)        : "|=",
            (CLexer.Equal)           : "==",
            (CLexer.NotEqual)        : "!=",
            (CLexer.Arrow)           : "",
            (CLexer.Dot)             : ".",
            (CLexer.Ellipsis)        : "",
            (CLexer.Constant)        : ""
    ]


    static String translateFromCToJava(int tokenIndex) {
        return cToJavaVocabulary[tokenIndex]
    }
}
